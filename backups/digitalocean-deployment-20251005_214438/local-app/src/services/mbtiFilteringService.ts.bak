/**
 * MBTI Filtering Service
 * 
 * Content filtering per persoonlijkheidstype voor alle 16 MBTI types
 * Integreert met alle content services en Enhanced AI System
 * 
 * @version 1.0.0
 * @author Thomas
 */

import database from '../database/v14/databaseV14';
import AIArtifacts from '../database/models/AIArtifacts';
import MbtiContent from '../database/models/MbtiContent';
import ContentItem from '../database/models/ContentItem';
import { logger } from '../utils/logger';

export interface MBTIFilter {
  mbtiType: string;
  contentType?: string;
  category?: string;
  qualityThreshold?: number;
  relevanceThreshold?: number;
  dateRange?: {
    start: Date;
    end: Date;
  };
  limit?: number;
  offset?: number;
}

export interface MBTIFilterResult {
  mbtiType: string;
  contentType: string;
  items: any[];
  totalCount: number;
  averageQuality: number;
  averageRelevance: number;
  filterApplied: MBTIFilter;
  timestamp: Date;
}

export interface MBTIContentRecommendation {
  mbtiType: string;
  contentType: string;
  category: string;
  title: string;
  description: string;
  content: any;
  qualityScore: number;
  relevanceScore: number;
  personalizedFor: string;
  recommendationReason: string;
  expectedEngagement: number;
}

export interface MBTIFilteringStats {
  totalFilters: number;
  byMBTIType: Record<string, number>;
  byContentType: Record<string, number>;
  averageQuality: number;
  averageRelevance: number;
  lastUpdated: Date;
}

export interface MBTIPersonalityProfile {
  mbtiType: string;
  cognitiveFunctions: {
    dominant: string;
    auxiliary: string;
    tertiary: string;
    inferior: string;
  };
  strengths: string[];
  challenges: string[];
  preferences: string[];
  contentPreferences: {
    preferredTypes: string[];
    preferredCategories: string[];
    qualityThreshold: number;
    relevanceThreshold: number;
  };
  engagementPatterns: {
    highEngagement: string[];
    mediumEngagement: string[];
    lowEngagement: string[];
  };
}

export class MBTIFilteringService {
  private static instance: MBTIFilteringService;
  private readonly MBTI_TYPES = [
    'INTJ', 'INTP', 'ENTJ', 'ENTP',
    'INFJ', 'INFP', 'ENFJ', 'ENFP',
    'ISTJ', 'ISFJ', 'ESTJ', 'ESFJ',
    'ISTP', 'ISFP', 'ESTP', 'ESFP'
  ];

  private readonly MBTI_PROFILES: Map<string, MBTIPersonalityProfile> = new Map();

  private constructor() {
    this.initializeMBTIProfiles();
  }

  public static getInstance(): MBTIFilteringService {
    if (!MBTIFilteringService.instance) {
      MBTIFilteringService.instance = new MBTIFilteringService();
    }
    return MBTIFilteringService.instance;
  }

  /**
   * Filter content voor specifiek MBTI type
   */
  async filterContentForMBTI(filter: MBTIFilter): Promise<MBTIFilterResult> {
    try {
      logger.info(`üîÑ Filtering content for MBTI type: ${filter.mbtiType}`);

      // Validate MBTI type
      if (!this.MBTI_TYPES.includes(filter.mbtiType)) {
        throw new Error(`Invalid MBTI type: ${filter.mbtiType}`);
      }

      // Get MBTI personality profile
      const profile = this.MBTI_PROFILES.get(filter.mbtiType);
      if (!profile) {
        throw new Error(`MBTI profile not found for type: ${filter.mbtiType}`);
      }

      // Filter AI artifacts
      const aiArtifacts = await this.filterAIArtifacts(filter, profile);
      
      // Filter MBTI content
      const mbtiContent = await this.filterMBTIContent(filter, profile);
      
      // Filter content items
      const contentItems = await this.filterContentItems(filter, profile);

      // Combine and sort results
      const allItems = [...aiArtifacts, ...mbtiContent, ...contentItems];
      const sortedItems = this.sortContentByRelevance(allItems, profile);

      // Calculate statistics
      const averageQuality = this.calculateAverageQuality(sortedItems);
      const averageRelevance = this.calculateAverageRelevance(sortedItems);

      const result: MBTIFilterResult = {
        mbtiType: filter.mbtiType,
        contentType: filter.contentType || 'all',
        items: sortedItems,
        totalCount: sortedItems.length,
        averageQuality,
        averageRelevance,
        filterApplied: filter,
        timestamp: new Date()
      };

      logger.info(`‚úÖ Filtered ${sortedItems.length} items for ${filter.mbtiType}`);
      return result;

    } catch (error) {
      logger.error('‚ùå Failed to filter content for MBTI:', { error });
      throw error;
    }
  }

  /**
   * Krijg gepersonaliseerde content aanbevelingen
   */
  async getPersonalizedRecommendations(mbtiType: string, limit: number = 10): Promise<MBTIContentRecommendation[]> {
    try {
      logger.info(`üîÑ Getting personalized recommendations for ${mbtiType}`);

      const profile = this.MBTI_PROFILES.get(mbtiType);
      if (!profile) {
        throw new Error(`MBTI profile not found for type: ${mbtiType}`);
      }

      const recommendations: MBTIContentRecommendation[] = [];

      // Get AI artifacts recommendations
      const aiArtifacts = await this.getAIArtifactsRecommendations(mbtiType, profile, limit);
      recommendations.push(...aiArtifacts);

      // Get MBTI content recommendations
      const mbtiContent = await this.getMBTIContentRecommendations(mbtiType, profile, limit);
      recommendations.push(...mbtiContent);

      // Get content items recommendations
      const contentItems = await this.getContentItemsRecommendations(mbtiType, profile, limit);
      recommendations.push(...contentItems);

      // Sort by relevance and quality
      const sortedRecommendations = recommendations
        .sort((a, b) => {
          const scoreA = (a.qualityScore + a.relevanceScore + a.expectedEngagement) / 3;
          const scoreB = (b.qualityScore + b.relevanceScore + b.expectedEngagement) / 3;
          return scoreB - scoreA;
        })
        .slice(0, limit);

      logger.info(`‚úÖ Found ${sortedRecommendations.length} personalized recommendations for ${mbtiType}`);
      return sortedRecommendations;

    } catch (error) {
      logger.error('‚ùå Failed to get personalized recommendations:', { error });
      throw error;
    }
  }

  /**
   * Krijg MBTI filtering statistieken
   */
  async getMBTIFilteringStats(): Promise<MBTIFilteringStats> {
    try {
      logger.info('üìä Getting MBTI filtering statistics...');

      const stats: MBTIFilteringStats = {
        totalFilters: 0,
        byMBTIType: {},
        byContentType: {},
        averageQuality: 0,
        averageRelevance: 0,
        lastUpdated: new Date()
      };

      // Get all content types
      const [aiArtifacts, mbtiContent, contentItems] = await Promise.all([
        database.collections.get<AIArtifacts>('ai_artifacts').query().fetch(),
        database.collections.get<MbtiContent>('mbti_content').query().fetch(),
        database.collections.get<ContentItem>('content_items').query().fetch()
      ]);

      // Calculate statistics
      stats.totalFilters = aiArtifacts.length + mbtiContent.length + contentItems.length;

      // By MBTI type
      [...aiArtifacts, ...mbtiContent, ...contentItems].forEach(item => {
        const mbtiType = item.mbtiType || 'unknown';
        stats.byMBTIType[mbtiType] = (stats.byMBTIType[mbtiType] || 0) + 1;
      });

      // By content type
      aiArtifacts.forEach(() => {
        stats.byContentType['ai_artifacts'] = (stats.byContentType['ai_artifacts'] || 0) + 1;
      });
      mbtiContent.forEach(() => {
        stats.byContentType['mbti_content'] = (stats.byContentType['mbti_content'] || 0) + 1;
      });
      contentItems.forEach(() => {
        stats.byContentType['content_items'] = (stats.byContentType['content_items'] || 0) + 1;
      });

      // Average quality and relevance
      const allItems = [...aiArtifacts, ...mbtiContent, ...contentItems];
      stats.averageQuality = this.calculateAverageQuality(allItems);
      stats.averageRelevance = this.calculateAverageRelevance(allItems);

      logger.info('‚úÖ MBTI filtering statistics calculated:', stats);
      return stats;

    } catch (error) {
      logger.error('‚ùå Failed to get MBTI filtering statistics:', { error });
      throw error;
    }
  }

  /**
   * Krijg MBTI personality profile
   */
  getMBTIPersonalityProfile(mbtiType: string): MBTIPersonalityProfile | undefined {
    return this.MBTI_PROFILES.get(mbtiType);
  }

  /**
   * Krijg alle beschikbare MBTI types
   */
  getAvailableMBTITypes(): string[] {
    return [...this.MBTI_TYPES];
  }

  /**
   * Update MBTI personality profile
   */
  updateMBTIPersonalityProfile(mbtiType: string, profile: Partial<MBTIPersonalityProfile>): void {
    const existingProfile = this.MBTI_PROFILES.get(mbtiType);
    if (existingProfile) {
      const updatedProfile = { ...existingProfile, ...profile };
      this.MBTI_PROFILES.set(mbtiType, updatedProfile);
      logger.info(`‚úÖ Updated MBTI personality profile for ${mbtiType}`);
    } else {
      logger.warn(`‚ö†Ô∏è MBTI profile not found for type: ${mbtiType}`);
    }
  }

  // Private helper methods

  private async filterAIArtifacts(filter: MBTIFilter, profile: MBTIPersonalityProfile): Promise<any[]> {
    const query = database.collections.get<AIArtifacts>('ai_artifacts').query();

    // Apply MBTI filter
    query.where('mbti_type', filter.mbtiType);

    // Apply quality threshold
    const qualityThreshold = filter.qualityThreshold || profile.contentPreferences.qualityThreshold;
    if (qualityThreshold) {
      query.where('quality_score', Q.gte(qualityThreshold));
    }

    // Apply date range
    if (filter.dateRange) {
      query.where('created_at', Q.between(filter.dateRange.start, filter.dateRange.end));
    }

    // Apply limit
    if (filter.limit) {
      query.take(filter.limit);
    }

    if (filter.offset) {
      query.skip(filter.offset);
    }

    const artifacts = await query.fetch();
    return artifacts.map(artifact => ({
      id: artifact.id,
      type: 'ai_artifacts',
      mbtiType: artifact.mbtiType,
      agent: artifact.agent,
      content: artifact.content,
      qualityScore: artifact.qualityScore,
      relevanceScore: this.calculateRelevanceScore(artifact, profile),
      createdAt: artifact.createdAt
    }));
  }

  private async filterMBTIContent(filter: MBTIFilter, profile: MBTIPersonalityProfile): Promise<any[]> {
    const query = database.collections.get<MbtiContent>('mbti_content').query();

    // Apply MBTI filter
    query.where('mbti_type', filter.mbtiType);

    // Apply content type filter
    if (filter.contentType) {
      query.where('content_type', filter.contentType);
    }

    // Apply category filter
    if (filter.category) {
      query.where('category', filter.category);
    }

    // Apply quality threshold
    const qualityThreshold = filter.qualityThreshold || profile.contentPreferences.qualityThreshold;
    if (qualityThreshold) {
      query.where('quality_score', Q.gte(qualityThreshold));
    }

    // Apply date range
    if (filter.dateRange) {
      query.where('created_at', Q.between(filter.dateRange.start, filter.dateRange.end));
    }

    // Apply limit
    if (filter.limit) {
      query.take(filter.limit);
    }

    if (filter.offset) {
      query.skip(filter.offset);
    }

    const content = await query.fetch();
    return content.map(item => ({
      id: item.id,
      type: 'mbti_content',
      mbtiType: item.mbtiType,
      contentType: item.contentType,
      category: item.category,
      title: item.title,
      description: item.description,
      content: item.content,
      qualityScore: item.qualityScore,
      relevanceScore: item.relevanceScore || this.calculateRelevanceScore(item, profile),
      createdAt: item.createdAt
    }));
  }

  private async filterContentItems(filter: MBTIFilter, profile: MBTIPersonalityProfile): Promise<any[]> {
    const query = database.collections.get<ContentItem>('content_items').query();

    // Apply MBTI filter if available
    if (filter.mbtiType) {
      query.where('mbti_type', filter.mbtiType);
    }

    // Apply content type filter
    if (filter.contentType) {
      query.where('content_type', filter.contentType);
    }

    // Apply category filter
    if (filter.category) {
      query.where('category', filter.category);
    }

    // Apply date range
    if (filter.dateRange) {
      query.where('created_at', Q.between(filter.dateRange.start, filter.dateRange.end));
    }

    // Apply limit
    if (filter.limit) {
      query.take(filter.limit);
    }

    if (filter.offset) {
      query.skip(filter.offset);
    }

    const items = await query.fetch();
    return items.map(item => ({
      id: item.id,
      type: 'content_items',
      mbtiType: item.mbtiType,
      contentType: item.contentType,
      category: item.category,
      title: item.title,
      description: item.description,
      content: item.content,
      qualityScore: item.qualityScore || 0.8,
      relevanceScore: this.calculateRelevanceScore(item, profile),
      createdAt: item.createdAt
    }));
  }

  private async getAIArtifactsRecommendations(mbtiType: string, profile: MBTIPersonalityProfile, limit: number): Promise<MBTIContentRecommendation[]> {
    const artifacts = await database.collections.get<AIArtifacts>('ai_artifacts')
      .query(
        Q.where('mbti_type', mbtiType),
        Q.where('quality_score', Q.gte(profile.contentPreferences.qualityThreshold)),
        Q.take(limit)
      )
      .fetch();

    return artifacts.map(artifact => ({
      mbtiType: artifact.mbtiType || mbtiType,
      contentType: 'ai_artifacts',
      category: 'ai_generated',
      title: `AI Generated Content for ${mbtiType}`,
      description: `High quality AI content generated for ${mbtiType} personality type`,
      content: artifact.content,
      qualityScore: artifact.qualityScore || 0.8,
      relevanceScore: this.calculateRelevanceScore(artifact, profile),
      personalizedFor: mbtiType,
      recommendationReason: `AI content tailored for ${mbtiType} cognitive functions`,
      expectedEngagement: this.calculateExpectedEngagement(artifact, profile)
    }));
  }

  private async getMBTIContentRecommendations(mbtiType: string, profile: MBTIPersonalityProfile, limit: number): Promise<MBTIContentRecommendation[]> {
    const content = await database.collections.get<MbtiContent>('mbti_content')
      .query(
        Q.where('mbti_type', mbtiType),
        Q.where('quality_score', Q.gte(profile.contentPreferences.qualityThreshold)),
        Q.take(limit)
      )
      .fetch();

    return content.map(item => ({
      mbtiType: item.mbtiType,
      contentType: 'mbti_content',
      category: item.category,
      title: item.title,
      description: item.description,
      content: item.content,
      qualityScore: item.qualityScore,
      relevanceScore: item.relevanceScore || this.calculateRelevanceScore(item, profile),
      personalizedFor: item.personalizedFor,
      recommendationReason: `Personalized content for ${mbtiType} strengths and challenges`,
      expectedEngagement: this.calculateExpectedEngagement(item, profile)
    }));
  }

  private async getContentItemsRecommendations(mbtiType: string, profile: MBTIPersonalityProfile, limit: number): Promise<MBTIContentRecommendation[]> {
    const items = await database.collections.get<ContentItem>('content_items')
      .query(
        Q.where('mbti_type', mbtiType),
        Q.take(limit)
      )
      .fetch();

    return items.map(item => ({
      mbtiType: item.mbtiType || mbtiType,
      contentType: 'content_items',
      category: item.category,
      title: item.title,
      description: item.description,
      content: item.content,
      qualityScore: item.qualityScore || 0.8,
      relevanceScore: this.calculateRelevanceScore(item, profile),
      personalizedFor: mbtiType,
      recommendationReason: `Content aligned with ${mbtiType} preferences`,
      expectedEngagement: this.calculateExpectedEngagement(item, profile)
    }));
  }

  private sortContentByRelevance(items: any[], profile: MBTIPersonalityProfile): any[] {
    return items.sort((a, b) => {
      const scoreA = (a.qualityScore || 0) + (a.relevanceScore || 0);
      const scoreB = (b.qualityScore || 0) + (b.relevanceScore || 0);
      return scoreB - scoreA;
    });
  }

  private calculateRelevanceScore(item: any, profile: MBTIPersonalityProfile): number {
    let relevanceScore = 0.5; // Base score

    // Check content type preference
    if (profile.contentPreferences.preferredTypes.includes(item.contentType)) {
      relevanceScore += 0.2;
    }

    // Check category preference
    if (profile.contentPreferences.preferredCategories.includes(item.category)) {
      relevanceScore += 0.2;
    }

    // Check engagement patterns
    if (profile.engagementPatterns.highEngagement.includes(item.contentType)) {
      relevanceScore += 0.3;
    } else if (profile.engagementPatterns.mediumEngagement.includes(item.contentType)) {
      relevanceScore += 0.1;
    }

    return Math.min(relevanceScore, 1.0);
  }

  private calculateExpectedEngagement(item: any, profile: MBTIPersonalityProfile): number {
    let engagement = 0.5; // Base engagement

    // Check if content type is in high engagement patterns
    if (profile.engagementPatterns.highEngagement.includes(item.contentType)) {
      engagement += 0.3;
    } else if (profile.engagementPatterns.mediumEngagement.includes(item.contentType)) {
      engagement += 0.1;
    }

    // Factor in quality score
    engagement += (item.qualityScore || 0.8) * 0.2;

    return Math.min(engagement, 1.0);
  }

  private calculateAverageQuality(items: any[]): number {
    if (items.length === 0) return 0;
    const totalQuality = items.reduce((sum, item) => sum + (item.qualityScore || 0), 0);
    return totalQuality / items.length;
  }

  private calculateAverageRelevance(items: any[]): number {
    if (items.length === 0) return 0;
    const totalRelevance = items.reduce((sum, item) => sum + (item.relevanceScore || 0), 0);
    return totalRelevance / items.length;
  }

  private initializeMBTIProfiles(): void {
    // Initialize all 16 MBTI personality profiles
    const profiles: MBTIPersonalityProfile[] = [
      {
        mbtiType: 'INTJ',
        cognitiveFunctions: { dominant: 'Ni', auxiliary: 'Te', tertiary: 'Fi', inferior: 'Se' },
        strengths: ['Strategic thinking', 'Independence', 'Determination'],
        challenges: ['Perfectionism', 'Impatience', 'Insensitivity'],
        preferences: ['Structure', 'Efficiency', 'Long-term planning'],
        contentPreferences: {
          preferredTypes: ['coaching_advice', 'personal_development', 'goal_setting'],
          preferredCategories: ['self_awareness', 'personal_growth', 'creativity_innovation'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['coaching_advice', 'goal_setting'],
          mediumEngagement: ['personal_development', 'skill_building'],
          lowEngagement: ['relationship_guidance', 'reflection_prompt']
        }
      },
      {
        mbtiType: 'INTP',
        cognitiveFunctions: { dominant: 'Ti', auxiliary: 'Ne', tertiary: 'Si', inferior: 'Fe' },
        strengths: ['Analytical thinking', 'Flexibility', 'Originality'],
        challenges: ['Disorganization', 'Insensitivity', 'Impatience'],
        preferences: ['Logic', 'Autonomy', 'Theoretical concepts'],
        contentPreferences: {
          preferredTypes: ['insight_analysis', 'skill_building', 'personal_development'],
          preferredCategories: ['self_awareness', 'creativity_innovation', 'personal_growth'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['insight_analysis', 'skill_building'],
          mediumEngagement: ['personal_development', 'challenge_activity'],
          lowEngagement: ['relationship_guidance', 'reflection_prompt']
        }
      },
      {
        mbtiType: 'ENTJ',
        cognitiveFunctions: { dominant: 'Te', auxiliary: 'Ni', tertiary: 'Se', inferior: 'Fi' },
        strengths: ['Natural leadership', 'Confidence', 'Efficiency'],
        challenges: ['Impatience', 'Stubbornness', 'Coldness'],
        preferences: ['Control', 'Results', 'Strategic planning'],
        contentPreferences: {
          preferredTypes: ['coaching_advice', 'goal_setting', 'skill_building'],
          preferredCategories: ['personal_growth', 'external_environment', 'decision_making'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['coaching_advice', 'goal_setting'],
          mediumEngagement: ['skill_building', 'personal_development'],
          lowEngagement: ['reflection_prompt', 'relationship_guidance']
        }
      },
      {
        mbtiType: 'ENTP',
        cognitiveFunctions: { dominant: 'Ne', auxiliary: 'Ti', tertiary: 'Fe', inferior: 'Si' },
        strengths: ['Quick thinking', 'Charisma', 'Energetic'],
        challenges: ['Insensitive', 'Intolerant', 'Impatient'],
        preferences: ['Innovation', 'Debate', 'Flexibility'],
        contentPreferences: {
          preferredTypes: ['challenge_activity', 'insight_analysis', 'skill_building'],
          preferredCategories: ['creativity_innovation', 'personal_growth', 'external_environment'],
          qualityThreshold: 0.7,
          relevanceThreshold: 0.6
        },
        engagementPatterns: {
          highEngagement: ['challenge_activity', 'insight_analysis'],
          mediumEngagement: ['skill_building', 'personal_development'],
          lowEngagement: ['reflection_prompt', 'relationship_guidance']
        }
      },
      {
        mbtiType: 'INFJ',
        cognitiveFunctions: { dominant: 'Ni', auxiliary: 'Fe', tertiary: 'Ti', inferior: 'Se' },
        strengths: ['Creative', 'Insightful', 'Inspiring'],
        challenges: ['Sensitive', 'Extremely private', 'Perfectionist'],
        preferences: ['Meaning', 'Authenticity', 'Personal growth'],
        contentPreferences: {
          preferredTypes: ['reflection_prompt', 'personal_development', 'relationship_guidance'],
          preferredCategories: ['self_awareness', 'emotional_intelligence', 'interpersonal_relationships'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['reflection_prompt', 'personal_development'],
          mediumEngagement: ['relationship_guidance', 'coaching_advice'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'INFP',
        cognitiveFunctions: { dominant: 'Fi', auxiliary: 'Ne', tertiary: 'Si', inferior: 'Te' },
        strengths: ['Idealistic', 'Loyal', 'Curious'],
        challenges: ['Overly idealistic', 'Too altruistic', 'Impractical'],
        preferences: ['Values', 'Harmony', 'Personal development'],
        contentPreferences: {
          preferredTypes: ['reflection_prompt', 'personal_development', 'relationship_guidance'],
          preferredCategories: ['self_awareness', 'emotional_intelligence', 'interpersonal_relationships'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['reflection_prompt', 'personal_development'],
          mediumEngagement: ['relationship_guidance', 'coaching_advice'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'ENFJ',
        cognitiveFunctions: { dominant: 'Fe', auxiliary: 'Ni', tertiary: 'Se', inferior: 'Ti' },
        strengths: ['Charismatic', 'Natural leaders', 'Passionate'],
        challenges: ['Overly idealistic', 'Too selfless', 'Sensitive'],
        preferences: ['Helping others', 'Harmony', 'Personal growth'],
        contentPreferences: {
          preferredTypes: ['relationship_guidance', 'coaching_advice', 'personal_development'],
          preferredCategories: ['interpersonal_relationships', 'emotional_intelligence', 'personal_growth'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['relationship_guidance', 'coaching_advice'],
          mediumEngagement: ['personal_development', 'reflection_prompt'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'ENFP',
        cognitiveFunctions: { dominant: 'Ne', auxiliary: 'Fi', tertiary: 'Te', inferior: 'Si' },
        strengths: ['Enthusiastic', 'Creative', 'Social'],
        challenges: ['Overly idealistic', 'Disorganized', 'Overly accommodating'],
        preferences: ['Possibilities', 'Inspiration', 'Flexibility'],
        contentPreferences: {
          preferredTypes: ['challenge_activity', 'personal_development', 'relationship_guidance'],
          preferredCategories: ['creativity_innovation', 'interpersonal_relationships', 'personal_growth'],
          qualityThreshold: 0.7,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['challenge_activity', 'personal_development'],
          mediumEngagement: ['relationship_guidance', 'coaching_advice'],
          lowEngagement: ['reflection_prompt', 'skill_building']
        }
      },
      {
        mbtiType: 'ISTJ',
        cognitiveFunctions: { dominant: 'Si', auxiliary: 'Te', tertiary: 'Fi', inferior: 'Ne' },
        strengths: ['Honest', 'Direct', 'Strong-willed'],
        challenges: ['Stubborn', 'Insensitive', 'Always by the book'],
        preferences: ['Order', 'Structure', 'Reliability'],
        contentPreferences: {
          preferredTypes: ['skill_building', 'goal_setting', 'personal_development'],
          preferredCategories: ['personal_growth', 'external_environment', 'decision_making'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['skill_building', 'goal_setting'],
          mediumEngagement: ['personal_development', 'coaching_advice'],
          lowEngagement: ['challenge_activity', 'reflection_prompt']
        }
      },
      {
        mbtiType: 'ISFJ',
        cognitiveFunctions: { dominant: 'Si', auxiliary: 'Fe', tertiary: 'Ti', inferior: 'Ne' },
        strengths: ['Supportive', 'Reliable', 'Patient'],
        challenges: ['Humble', 'Shy', 'Represses feelings'],
        preferences: ['Harmony', 'Support', 'Tradition'],
        contentPreferences: {
          preferredTypes: ['relationship_guidance', 'personal_development', 'reflection_prompt'],
          preferredCategories: ['interpersonal_relationships', 'emotional_intelligence', 'personal_growth'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['relationship_guidance', 'personal_development'],
          mediumEngagement: ['reflection_prompt', 'coaching_advice'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'ESTJ',
        cognitiveFunctions: { dominant: 'Te', auxiliary: 'Si', tertiary: 'Ne', inferior: 'Fi' },
        strengths: ['Dedicated', 'Strong-willed', 'Direct'],
        challenges: ['Inflexible', 'Uncomfortable with unconventional situations'],
        preferences: ['Structure', 'Order', 'Efficiency'],
        contentPreferences: {
          preferredTypes: ['goal_setting', 'skill_building', 'coaching_advice'],
          preferredCategories: ['personal_growth', 'external_environment', 'decision_making'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['goal_setting', 'skill_building'],
          mediumEngagement: ['coaching_advice', 'personal_development'],
          lowEngagement: ['challenge_activity', 'reflection_prompt']
        }
      },
      {
        mbtiType: 'ESFJ',
        cognitiveFunctions: { dominant: 'Fe', auxiliary: 'Si', tertiary: 'Ne', inferior: 'Ti' },
        strengths: ['Strong practical skills', 'Loyal', 'Sensitive'],
        challenges: ['Worried about social status', 'Vulnerable to criticism'],
        preferences: ['Harmony', 'Support', 'Tradition'],
        contentPreferences: {
          preferredTypes: ['relationship_guidance', 'personal_development', 'coaching_advice'],
          preferredCategories: ['interpersonal_relationships', 'emotional_intelligence', 'personal_growth'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['relationship_guidance', 'personal_development'],
          mediumEngagement: ['coaching_advice', 'reflection_prompt'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'ISTP',
        cognitiveFunctions: { dominant: 'Ti', auxiliary: 'Se', tertiary: 'Ni', inferior: 'Fe' },
        strengths: ['Optimistic', 'Creative', 'Practical'],
        challenges: ['Stubborn', 'Insensitive', 'Private'],
        preferences: ['Freedom', 'Action', 'Practicality'],
        contentPreferences: {
          preferredTypes: ['challenge_activity', 'skill_building', 'insight_analysis'],
          preferredCategories: ['creativity_innovation', 'external_environment', 'personal_growth'],
          qualityThreshold: 0.7,
          relevanceThreshold: 0.6
        },
        engagementPatterns: {
          highEngagement: ['challenge_activity', 'skill_building'],
          mediumEngagement: ['insight_analysis', 'personal_development'],
          lowEngagement: ['reflection_prompt', 'relationship_guidance']
        }
      },
      {
        mbtiType: 'ISFP',
        cognitiveFunctions: { dominant: 'Fi', auxiliary: 'Se', tertiary: 'Ni', inferior: 'Te' },
        strengths: ['Sensitive', 'Loyal', 'Imaginative'],
        challenges: ['Overly competitive', 'Unpredictable'],
        preferences: ['Harmony', 'Authenticity', 'Flexibility'],
        contentPreferences: {
          preferredTypes: ['reflection_prompt', 'personal_development', 'relationship_guidance'],
          preferredCategories: ['self_awareness', 'emotional_intelligence', 'interpersonal_relationships'],
          qualityThreshold: 0.8,
          relevanceThreshold: 0.8
        },
        engagementPatterns: {
          highEngagement: ['reflection_prompt', 'personal_development'],
          mediumEngagement: ['relationship_guidance', 'coaching_advice'],
          lowEngagement: ['challenge_activity', 'skill_building']
        }
      },
      {
        mbtiType: 'ESTP',
        cognitiveFunctions: { dominant: 'Se', auxiliary: 'Ti', tertiary: 'Fe', inferior: 'Ni' },
        strengths: ['Bold', 'Rational', 'Practical'],
        challenges: ['Sensitive', 'Risk-prone', 'Impatient'],
        preferences: ['Action', 'Results', 'Flexibility'],
        contentPreferences: {
          preferredTypes: ['challenge_activity', 'skill_building', 'coaching_advice'],
          preferredCategories: ['external_environment', 'personal_growth', 'decision_making'],
          qualityThreshold: 0.7,
          relevanceThreshold: 0.6
        },
        engagementPatterns: {
          highEngagement: ['challenge_activity', 'skill_building'],
          mediumEngagement: ['coaching_advice', 'personal_development'],
          lowEngagement: ['reflection_prompt', 'relationship_guidance']
        }
      },
      {
        mbtiType: 'ESFP',
        cognitiveFunctions: { dominant: 'Se', auxiliary: 'Fi', tertiary: 'Te', inferior: 'Ni' },
        strengths: ['Bold', 'Original', 'Aesthetic'],
        challenges: ['Sensitive', 'Conflict-averse', 'Easily stressed'],
        preferences: ['Harmony', 'Fun', 'Spontaneity'],
        contentPreferences: {
          preferredTypes: ['challenge_activity', 'relationship_guidance', 'personal_development'],
          preferredCategories: ['interpersonal_relationships', 'creativity_innovation', 'personal_growth'],
          qualityThreshold: 0.7,
          relevanceThreshold: 0.7
        },
        engagementPatterns: {
          highEngagement: ['challenge_activity', 'relationship_guidance'],
          mediumEngagement: ['personal_development', 'coaching_advice'],
          lowEngagement: ['reflection_prompt', 'skill_building']
        }
      }
    ];

    // Store profiles in Map
    profiles.forEach(profile => {
      this.MBTI_PROFILES.set(profile.mbtiType, profile);
    });

    logger.info(`‚úÖ Initialized ${profiles.length} MBTI personality profiles`);
  }
}

// Export singleton instance
export const mbtiFilteringService = MBTIFilteringService.getInstance();
