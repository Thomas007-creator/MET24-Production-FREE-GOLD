import React, { createContext, useContext } from 'react';
import { Button, ButtonProps } from '@nextui-org/react';
import { LucideIcon } from 'lucide-react';

// ===== 1. PROVIDER/CONTEXT PATTERN =====

interface BigButtonContextValue {
  variant: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'gold';
  size: 'sm' | 'md' | 'lg' | 'xl';
  isFullWidth: boolean;
  isLoading: boolean;
  loadingText?: string;
}

const BigButtonContext = createContext<BigButtonContextValue | null>(null);

const useBigButton = () => {
  const context = useContext(BigButtonContext);
  if (!context) {
    throw new Error('useBigButton must be used within BigButtonProvider');
  }
  return context;
};

// ===== 2. PROVIDER COMPONENT =====

interface BigButtonProviderProps {
  children: React.ReactNode;
  variant?: BigButtonContextValue['variant'];
  size?: BigButtonContextValue['size'];
  fullWidth?: boolean;
  loading?: boolean;
  loadingText?: string;
}

export const BigButtonProvider: React.FC<BigButtonProviderProps> = ({
  children,
  variant = 'primary',
  size = 'lg', 
  fullWidth = true,
  loading = false,
  loadingText
}) => {
  const value: BigButtonContextValue = {
    variant,
    size,
    isFullWidth: fullWidth,
    isLoading: loading,
    loadingText
  };

  return (
    <BigButtonContext.Provider value={value}>
      {children}
    </BigButtonContext.Provider>
  );
};

// ===== 3. DISCRETE COMPONENTS (No Boolean Props!) =====

// Base Button Component
interface ButtonBaseProps extends Omit<ButtonProps, 'className' | 'variant' | 'size'> {
  children: React.ReactNode;
  className?: string;
}

const ButtonBase: React.FC<ButtonBaseProps> = ({ children, className = '', ...props }) => {
  const { variant, size, isFullWidth, isLoading, loadingText } = useBigButton();

  const baseClasses = 'backdrop-blur-xl border transition-all duration-300';

  const variantClasses = {
    primary:
      'bg-glass-accent border-glass-borderStrong text-text-lighter hover:bg-glass-primary hover:border-glass-border hover:shadow-glow-aqua-strong',
    secondary:
      'bg-glass-primary border-glass-border text-light-aqua-primary hover:bg-glass-accent hover:border-glass-borderStrong hover:shadow-glow-aqua-subtle',
    success:
      'bg-green-500/20 border-green-500/30 text-white hover:bg-green-500/30 hover:border-green-500/50 hover:shadow-glow-success',
    warning:
      'bg-yellow-500/20 border-yellow-500/30 text-white hover:bg-yellow-500/30 hover:border-yellow-500/50 hover:shadow-glow-warning',
    danger:
      'bg-red-500/20 border-red-500/30 text-white hover:bg-red-500/30 hover:border-red-500/50 hover:shadow-glow-danger',
    gold: 'bg-gradient-gold text-dark-blue-primary font-bold border-2 border-orange-600 hover:shadow-glow-gold',
  };

  const sizeClasses = {
    sm: 'text-sm px-4 py-2',
    md: 'text-base px-6 py-3',
    lg: 'text-lg px-8 py-4',
    xl: 'text-xl px-10 py-5',
  };

  const widthClass = isFullWidth ? 'w-full' : '';
  const hoverClass = variant !== 'gold' ? 'hover:-translate-y-1' : '';

  const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClass} ${hoverClass} ${className}`;

  return (
    <Button
      className={buttonClasses}
      size={size === 'xl' ? 'lg' : size}
      isLoading={isLoading}
      {...props}
    >
      {isLoading && loadingText ? loadingText : children}
    </Button>
  );
};

// ===== 4. DISCRETE ICON COMPONENTS =====

interface IconProps {
  icon: LucideIcon;
}

export const StartIcon: React.FC<IconProps> = ({ icon: Icon }) => {
  const { size } = useBigButton();
  const iconSize = size === 'xl' ? 24 : size === 'lg' ? 20 : 16;
  
  return <Icon size={iconSize} />;
};

export const EndIcon: React.FC<IconProps> = ({ icon: Icon }) => {
  const { size } = useBigButton();
  const iconSize = size === 'xl' ? 24 : size === 'lg' ? 20 : 16;
  
  return <Icon size={iconSize} />;
};

// ===== 5. DISCRETE STATE COMPONENTS =====

export const LoadingButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => {
  return (
    <BigButtonProvider loading={true}>
      <ButtonBase {...props}>
        {children}
      </ButtonBase>
    </BigButtonProvider>
  );
};

export const FullWidthButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => {
  return (
    <BigButtonProvider fullWidth={true}>
      <ButtonBase {...props}>
        {children}
      </ButtonBase>
    </BigButtonProvider>
  );
};

// ===== 6. MAIN COMPOSITE COMPONENT (JSX Composition) =====

export const BigButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => {
  return (
    <BigButtonProvider>
      <ButtonBase {...props}>
        {children}
      </ButtonBase>
    </BigButtonProvider>
  );
};

// ===== 7. VARIANT COMPONENTS (No Boolean Props!) =====

export const PrimaryButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider variant="primary">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

export const SecondaryButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider variant="secondary">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

export const SuccessButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider variant="success">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

export const GoldButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider variant="gold">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

// ===== 8. SIZE COMPONENTS =====

export const SmallButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider size="sm">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

export const LargeButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider size="lg">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

export const ExtraLargeButton: React.FC<ButtonBaseProps> = ({ children, ...props }) => (
  <BigButtonProvider size="xl">
    <ButtonBase {...props}>{children}</ButtonBase>
  </BigButtonProvider>
);

// ===== 9. COMPOUND COMPONENT PATTERN =====

// For backwards compatibility and complex use cases
interface CompoundBigButtonProps extends ButtonBaseProps {
  variant?: BigButtonContextValue['variant'];
  size?: BigButtonContextValue['size'];
  fullWidth?: boolean;
  loading?: boolean;
  loadingText?: string;
  startIcon?: LucideIcon;
  endIcon?: LucideIcon;
}

export const CompoundBigButton: React.FC<CompoundBigButtonProps> = ({
  children,
  variant,
  size,
  fullWidth,
  loading,
  loadingText,
  startIcon,
  endIcon,
  ...props
}) => {
  return (
    <BigButtonProvider 
      variant={variant}
      size={size}
      fullWidth={fullWidth}
      loading={loading}
      loadingText={loadingText}
    >
      <Button
        {...props}
        startContent={startIcon ? <StartIcon icon={startIcon} /> : undefined}
        endContent={endIcon ? <EndIcon icon={endIcon} /> : undefined}
      >
        <ButtonBase {...props}>
          {children}
        </ButtonBase>
      </Button>
    </BigButtonProvider>
  );
};

// ===== 10. USAGE EXAMPLES (JSX Composition) =====

/*

// ❌ OLD WAY (Boolean props controlling rendering):
<BigButton 
  variant="primary"
  size="lg" 
  fullWidth={true}
  loading={false}
  icon={SaveIcon}
  iconPosition="end"
>
  Save Changes
</BigButton>

// ✅ NEW WAY (Discrete components via presence):
<PrimaryButton>
  Save Changes
  <EndIcon icon={SaveIcon} />
</PrimaryButton>

// ✅ COMPLEX COMPOSITION:
<BigButtonProvider variant="gold" size="xl" fullWidth={true}>
  <ButtonBase>
    <StartIcon icon={StarIcon} />
    Premium Feature
    <EndIcon icon={ArrowRightIcon} />
  </ButtonBase>
</BigButtonProvider>

// ✅ CONDITIONAL RENDERING (via presence, not booleans):
<div className="button-group">
  {isEditing ? (
    <>
      <SuccessButton>Save</SuccessButton>
      <SecondaryButton>Cancel</SecondaryButton>
    </>
  ) : (
    <PrimaryButton>Edit</PrimaryButton>
  )}
</div>

// ✅ LOADING STATE (via dedicated component):
{isProcessing ? (
  <LoadingButton loadingText="Processing...">
    Please wait
  </LoadingButton>
) : (
  <PrimaryButton>Submit</PrimaryButton>
)}

*/

export default BigButton;

// ===== BACKWARDS COMPATIBILITY =====

// Keep the old interface for migration period
export interface BigButtonProps extends CompoundBigButtonProps {}

// Export the compound version as default for gradual migration
export { CompoundBigButton as BigButton };

// Export all discrete components for new usage
export {
  BigButtonProvider,
  ButtonBase,
  StartIcon,
  EndIcon,
  LoadingButton,
  FullWidthButton,
  PrimaryButton,
  SecondaryButton,
  SuccessButton,
  GoldButton,
  SmallButton,
  LargeButton,
  ExtraLargeButton
};