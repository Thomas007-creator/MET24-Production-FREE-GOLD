import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import {
  ThemePill,
  ThemePillProvider,
  useThemePill,
  BasePill,
  PillIcon,
  PrimaryPill,
  SecondaryPill,
  SuccessPill,
  WarningPill,
  DangerPill,
  InfoPill,
  GradientPill,
  SmallPill,
  MediumPill,
  LargePill,
} from './ThemePill.refactored';
import { Heart, Star } from 'lucide-react';

// Mock Lucide icons
jest.mock('lucide-react', () => ({
  Heart: () => <div data-testid="heart-icon">Heart</div>,
  Star: () => <div data-testid="star-icon">Star</div>,
}));

// Mock NextUI Chip
jest.mock('@nextui-org/react', () => ({
  Chip: ({ children, className, startContent, endContent, ...props }: any) => (
    <div
      data-testid="chip"
      className={className}
      data-props={JSON.stringify(props)}
      data-start-content={!!startContent}
      data-end-content={!!endContent}
    >
      {startContent}
      {children}
      {endContent}
    </div>
  ),
}));

describe('ThemePill Composition Architecture', () => {
  describe('Provider Pattern', () => {
    it('provides context to child components', () => {
      const TestComponent = () => {
        const context = useThemePill();
        return <div data-testid="context-value">{JSON.stringify(context)}</div>;
      };

      render(
        <ThemePillProvider variant="secondary" size="lg" glassmorphism={false}>
          <TestComponent />
        </ThemePillProvider>
      );

      const contextValue = JSON.parse(screen.getByTestId('context-value').textContent || '{}');
      expect(contextValue).toEqual({
        variant: 'secondary',
        size: 'lg',
        glassmorphism: false,
      });
    });

    it('throws error when useThemePill is used outside provider', () => {
      const TestComponent = () => {
        useThemePill();
        return <div>Test</div>;
      };

      expect(() => render(<TestComponent />)).toThrow(
        'useThemePill must be used within ThemePillProvider'
      );
    });
  });

  describe('BasePill Component', () => {
    it('renders with default context values', () => {
      render(
        <ThemePillProvider>
          <BasePill>Test Content</BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toBeInTheDocument();
      expect(chip).toHaveTextContent('Test Content');
      expect(chip).toHaveClass('backdrop-blur-xl', 'border');
    });

    it('applies variant classes correctly', () => {
      render(
        <ThemePillProvider variant="success">
          <BasePill>Success Pill</BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveClass('bg-green-500/20', 'border-green-500/30', 'text-green-400');
    });

    it('applies size classes correctly', () => {
      render(
        <ThemePillProvider size="sm">
          <BasePill>Small Pill</BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveClass('text-xs', 'px-2', 'py-1');
    });

    it('respects glassmorphism setting', () => {
      render(
        <ThemePillProvider glassmorphism={false}>
          <BasePill>No Glass</BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).not.toHaveClass('backdrop-blur-xl', 'border');
    });

    it('passes through additional props', () => {
      render(
        <ThemePillProvider>
          <BasePill data-custom="test-prop">With Props</BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      const props = JSON.parse(chip.getAttribute('data-props') || '{}');
      expect(props['data-custom']).toBe('test-prop');
    });
  });

  describe('PillIcon Component', () => {
    it('renders icon at start position by default', () => {
      render(
        <ThemePillProvider>
          <PillIcon icon={Heart} />
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveAttribute('data-start-content', 'true');
      expect(chip).toHaveAttribute('data-end-content', 'false');
      expect(screen.getByTestId('heart-icon')).toBeInTheDocument();
    });

    it('renders icon at end position', () => {
      render(
        <ThemePillProvider>
          <PillIcon icon={Star} position="end" />
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveAttribute('data-start-content', 'false');
      expect(chip).toHaveAttribute('data-end-content', 'true');
      expect(screen.getByTestId('star-icon')).toBeInTheDocument();
    });

    it('applies correct icon sizes', () => {
      const { rerender } = render(
        <ThemePillProvider size="sm">
          <PillIcon icon={Heart} />
        </ThemePillProvider>
      );

      // Note: In real implementation, icon size would be checked via props
      // This is a simplified test for the composition pattern
      expect(screen.getByTestId('heart-icon')).toBeInTheDocument();

      rerender(
        <ThemePillProvider size="lg">
          <PillIcon icon={Heart} />
        </ThemePillProvider>
      );

      expect(screen.getByTestId('heart-icon')).toBeInTheDocument();
    });
  });

  describe('Discrete Variant Components', () => {
    const variants = [
      { Component: PrimaryPill, expectedClass: 'bg-glass-accent' },
      { Component: SecondaryPill, expectedClass: 'bg-glass-secondary' },
      { Component: SuccessPill, expectedClass: 'bg-green-500/20' },
      { Component: WarningPill, expectedClass: 'bg-yellow-500/20' },
      { Component: DangerPill, expectedClass: 'bg-red-500/20' },
      { Component: InfoPill, expectedClass: 'bg-blue-500/20' },
      { Component: GradientPill, expectedClass: 'bg-gradient-aqua' },
    ];

    variants.forEach(({ Component, expectedClass }) => {
      it(`${Component.name} applies correct variant styling`, () => {
        render(<Component>{Component.name}</Component>);

        const chip = screen.getByTestId('chip');
        expect(chip).toHaveClass(expectedClass);
        expect(chip).toHaveTextContent(Component.name);
      });
    });
  });

  describe('Size Variant Components', () => {
    const sizes = [
      { Component: SmallPill, expectedClasses: ['text-xs', 'px-2', 'py-1'] },
      { Component: MediumPill, expectedClasses: ['text-sm', 'px-3', 'py-1.5'] },
      { Component: LargePill, expectedClasses: ['text-base', 'px-4', 'py-2'] },
    ];

    sizes.forEach(({ Component, expectedClasses }) => {
      it(`${Component.name} applies correct size styling`, () => {
        render(<Component>{Component.name}</Component>);

        const chip = screen.getByTestId('chip');
        expectedClasses.forEach(className => {
          expect(chip).toHaveClass(className);
        });
        expect(chip).toHaveTextContent(Component.name);
      });
    });
  });

  describe('Backwards Compatibility Layer', () => {
    it('maintains original ThemePill API', () => {
      render(
        <ThemePill variant="primary" size="md">
          Original API
        </ThemePill>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveTextContent('Original API');
      expect(chip).toHaveClass('bg-glass-accent');
    });

    it('supports icon prop with positioning', () => {
      render(
        <ThemePill icon={Heart} iconPosition="start">
          With Icon
        </ThemePill>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveAttribute('data-start-content', 'true');
      expect(chip).toHaveTextContent('With Icon');
      expect(screen.getByTestId('heart-icon')).toBeInTheDocument();
    });

    it('supports glassmorphism boolean prop', () => {
      const { rerender } = render(
        <ThemePill glassmorphism={true}>With Glass</ThemePill>
      );

      expect(screen.getByTestId('chip')).toHaveClass('backdrop-blur-xl');

      rerender(
        <ThemePill glassmorphism={false}>No Glass</ThemePill>
      );

      expect(screen.getByTestId('chip')).not.toHaveClass('backdrop-blur-xl');
    });

    it('passes through additional Chip props', () => {
      render(
        <ThemePill isDisabled onClick={() => {}}>
          With Props
        </ThemePill>
      );

      const chip = screen.getByTestId('chip');
      const props = JSON.parse(chip.getAttribute('data-props') || '{}');
      expect(props.isDisabled).toBe(true);
      expect(typeof props.onClick).toBe('function');
    });
  });

  describe('Composition Patterns', () => {
    it('allows nested provider override', () => {
      render(
        <ThemePillProvider variant="primary" size="md">
          <PrimaryPill>Outer</PrimaryPill>
          <ThemePillProvider variant="secondary">
            <SecondaryPill>Inner</SecondaryPill>
          </ThemePillProvider>
        </ThemePillProvider>
      );

      const chips = screen.getAllByTestId('chip');
      expect(chips[0]).toHaveClass('bg-glass-accent'); // PrimaryPill
      expect(chips[1]).toHaveClass('bg-glass-secondary'); // SecondaryPill
    });

    it('supports complex icon composition', () => {
      render(
        <ThemePillProvider>
          <BasePill
            startContent={<Heart data-testid="custom-start" />}
            endContent={<Star data-testid="custom-end" />}
          >
            Complex Composition
          </BasePill>
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveAttribute('data-start-content', 'true');
      expect(chip).toHaveAttribute('data-end-content', 'true');
      expect(screen.getByTestId('custom-start')).toBeInTheDocument();
      expect(screen.getByTestId('custom-end')).toBeInTheDocument();
    });
  });

  describe('Error Boundaries & Edge Cases', () => {
    it('handles missing children gracefully', () => {
      render(
        <ThemePillProvider>
          <BasePill />
        </ThemePillProvider>
      );

      const chip = screen.getByTestId('chip');
      expect(chip).toBeInTheDocument();
    });

    it('handles empty icon prop', () => {
      render(<ThemePill icon={undefined}>No Icon</ThemePill>);

      const chip = screen.getByTestId('chip');
      expect(chip).toHaveAttribute('data-start-content', 'false');
      expect(chip).toHaveAttribute('data-end-content', 'false');
    });
  });
});