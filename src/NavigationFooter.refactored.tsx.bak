import React, { createContext, useContext, ReactNode } from 'react';
import { LucideIcon } from 'lucide-react';

// ===== PROVIDER PATTERN =====
interface NavigationFooterContextValue {
  variant: 'horizontal' | 'vertical';
  size: 'sm' | 'md' | 'lg';
  showLabels: boolean;
  glassmorphism: boolean;
}

const NavigationFooterContext = createContext<NavigationFooterContextValue | null>(null);

const useNavigationFooter = () => {
  const context = useContext(NavigationFooterContext);
  if (!context) {
    throw new Error('useNavigationFooter must be used within NavigationFooterProvider');
  }
  return context;
};

// ===== PROVIDER COMPONENT =====
interface NavigationFooterProviderProps {
  children: ReactNode;
  variant?: 'horizontal' | 'vertical';
  size?: 'sm' | 'md' | 'lg';
  showLabels?: boolean;
  glassmorphism?: boolean;
}

const NavigationFooterProvider: React.FC<NavigationFooterProviderProps> = ({
  children,
  variant = 'horizontal',
  size = 'md',
  showLabels = true,
  glassmorphism = true,
}) => {
  const value: NavigationFooterContextValue = {
    variant,
    size,
    showLabels,
    glassmorphism,
  };

  return (
    <NavigationFooterContext.Provider value={value}>
      {children}
    </NavigationFooterContext.Provider>
  );
};

// ===== GLASS EFFECT COMPOSITION =====
interface GlassFooterProps {
  children: ReactNode;
  className?: string;
}

const GlassFooter: React.FC<GlassFooterProps> = ({ children, className = '' }) => {
  const { variant } = useNavigationFooter();

  const baseClasses = 'bg-[rgba(27,38,59,0.5)] backdrop-blur-xl border-t border-[rgba(100,223,223,0.2)] shadow-lg';

  const variantClasses = {
    horizontal: 'flex items-center justify-around',
    vertical: 'flex flex-col space-y-2',
  };

  const containerClasses = `${baseClasses} ${variantClasses[variant]} ${className}`;

  return <nav className={containerClasses}>{children}</nav>;
};

const SolidFooter: React.FC<GlassFooterProps> = ({ children, className = '' }) => {
  const { variant } = useNavigationFooter();

  const baseClasses = 'bg-[#1b263b] border-t border-[rgba(100,223,223,0.1)]';

  const variantClasses = {
    horizontal: 'flex items-center justify-around',
    vertical: 'flex flex-col space-y-2',
  };

  const containerClasses = `${baseClasses} ${variantClasses[variant]} ${className}`;

  return <nav className={containerClasses}>{children}</nav>;
};

// ===== BASE NAVIGATION ITEM COMPONENT =====
interface BaseNavigationItemProps {
  icon: LucideIcon;
  onClick: () => void;
  disabled?: boolean;
  active?: boolean;
  variant?: 'primary' | 'secondary' | 'ghost';
  children?: ReactNode;
  className?: string;
}

const BaseNavigationItem: React.FC<BaseNavigationItemProps> = ({
  icon: Icon,
  onClick,
  disabled = false,
  active = false,
  variant = 'primary',
  children,
  className = '',
}) => {
  const { size, showLabels } = useNavigationFooter();

  const sizeClasses = {
    sm: {
      container: 'p-2',
      icon: 16,
      text: 'text-xs',
    },
    md: {
      container: 'p-3',
      icon: 20,
      text: 'text-sm',
    },
    lg: {
      container: 'p-4',
      icon: 24,
      text: 'text-base',
    },
  };

  const currentSize = sizeClasses[size];

  const baseItemClasses = `flex items-center gap-2 rounded-lg transition-all duration-300 ${currentSize.container} ${currentSize.text}`;

  const getVariantClasses = () => {
    if (disabled) {
      return `${baseItemClasses} opacity-50 cursor-not-allowed`;
    }

    const variantClasses = {
      primary: active
        ? 'bg-[rgba(100,223,223,0.2)] text-[#64dfdf] shadow-[0_0_20px_rgba(100,223,223,0.3)]'
        : 'text-[#e0e0e0] hover:bg-[rgba(100,223,223,0.1)] hover:text-[#64dfdf] hover:shadow-[0_0_15px_rgba(100,223,223,0.2)]',
      secondary: active
        ? 'bg-[rgba(27,38,59,0.3)] text-[#64dfdf] border border-[rgba(100,223,223,0.3)]'
        : 'text-[#e0e0e0] hover:bg-[rgba(27,38,59,0.2)] hover:text-[#64dfdf]',
      ghost: active
        ? 'text-[#64dfdf]'
        : 'text-[#e0e0e0] hover:text-[#64dfdf]',
    };

    return `${baseItemClasses} ${variantClasses[variant]}`;
  };

  const itemClasses = `${getVariantClasses()} ${className}`;

  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={itemClasses}
    >
      <Icon size={currentSize.icon} />
      {showLabels && children}
    </button>
  );
};

// ===== DISCRETE ITEM COMPONENTS =====
interface NavigationItemProps extends Omit<BaseNavigationItemProps, 'children'> {
  label: string;
}

const PrimaryNavigationItem: React.FC<NavigationItemProps> = (props) => (
  <BaseNavigationItem variant="primary" {...props}>
    {props.label}
  </BaseNavigationItem>
);

const SecondaryNavigationItem: React.FC<NavigationItemProps> = (props) => (
  <BaseNavigationItem variant="secondary" {...props}>
    {props.label}
  </BaseNavigationItem>
);

const GhostNavigationItem: React.FC<NavigationItemProps> = (props) => (
  <BaseNavigationItem variant="ghost" {...props}>
    {props.label}
  </BaseNavigationItem>
);

// ===== ACTIVE/DISABLED VARIANTS =====
interface ActiveNavigationItemProps extends Omit<BaseNavigationItemProps, 'active' | 'children'> {
  label: string;
}

const ActiveNavigationItem: React.FC<ActiveNavigationItemProps> = (props) => (
  <BaseNavigationItem active={true} {...props}>
    {props.label}
  </BaseNavigationItem>
);

const DisabledNavigationItem: React.FC<ActiveNavigationItemProps> = (props) => (
  <BaseNavigationItem disabled={true} {...props}>
    {props.label}
  </BaseNavigationItem>
);

// ===== SIZE VARIANTS =====
interface SmallNavigationItemProps extends Omit<BaseNavigationItemProps, 'children'> {
  label: string;
}

const SmallNavigationItem: React.FC<SmallNavigationItemProps> = (props) => (
  <NavigationFooterProvider size="sm">
    <BaseNavigationItem {...props}>
      {props.label}
    </BaseNavigationItem>
  </NavigationFooterProvider>
);

const MediumNavigationItem: React.FC<SmallNavigationItemProps> = (props) => (
  <NavigationFooterProvider size="md">
    <BaseNavigationItem {...props}>
      {props.label}
    </BaseNavigationItem>
  </NavigationFooterProvider>
);

const LargeNavigationItem: React.FC<SmallNavigationItemProps> = (props) => (
  <NavigationFooterProvider size="lg">
    <BaseNavigationItem {...props}>
      {props.label}
    </BaseNavigationItem>
  </NavigationFooterProvider>
);

// ===== BACKWARDS COMPATIBILITY LAYER =====
interface NavigationItem {
  label: string;
  icon: LucideIcon;
  onClick: () => void;
  active?: boolean;
  disabled?: boolean;
  variant?: 'primary' | 'secondary' | 'ghost';
}

interface NavigationFooterProps {
  items: NavigationItem[];
  variant?: 'horizontal' | 'vertical';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  showLabels?: boolean;
  glassmorphism?: boolean;
}

const NavigationFooter: React.FC<NavigationFooterProps> = ({
  items,
  variant = 'horizontal',
  size = 'md',
  className = '',
  showLabels = true,
  glassmorphism = true,
}) => {
  const FooterComponent = glassmorphism ? GlassFooter : SolidFooter;

  return (
    <NavigationFooterProvider
      variant={variant}
      size={size}
      showLabels={showLabels}
      glassmorphism={glassmorphism}
    >
      <FooterComponent className={className}>
        {items.map((item, index) => (
          <BaseNavigationItem
            key={index}
            icon={item.icon}
            onClick={item.onClick}
            active={item.active}
            disabled={item.disabled}
            variant={item.variant}
          >
            {item.label}
          </BaseNavigationItem>
        ))}
      </FooterComponent>
    </NavigationFooterProvider>
  );
};

// ===== EXPORTS =====
export default NavigationFooter;
export type { NavigationFooterProps, NavigationItem };

// Composition API exports
export {
  NavigationFooterProvider,
  useNavigationFooter,
  GlassFooter,
  SolidFooter,
  BaseNavigationItem,
  PrimaryNavigationItem,
  SecondaryNavigationItem,
  GhostNavigationItem,
  ActiveNavigationItem,
  DisabledNavigationItem,
  SmallNavigationItem,
  MediumNavigationItem,
  LargeNavigationItem,
};