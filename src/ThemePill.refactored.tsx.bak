import React, { createContext, useContext, ReactNode } from 'react';
import { Chip, ChipProps } from '@nextui-org/react';
import { LucideIcon } from 'lucide-react';

// ===== PROVIDER PATTERN =====
interface ThemePillContextValue {
  variant: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'gradient';
  size: 'sm' | 'md' | 'lg';
  glassmorphism: boolean;
}

const ThemePillContext = createContext<ThemePillContextValue | null>(null);

const useThemePill = () => {
  const context = useContext(ThemePillContext);
  if (!context) {
    throw new Error('useThemePill must be used within ThemePillProvider');
  }
  return context;
};

// ===== PROVIDER COMPONENT =====
interface ThemePillProviderProps {
  children: ReactNode;
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'gradient';
  size?: 'sm' | 'md' | 'lg';
  glassmorphism?: boolean;
}

const ThemePillProvider: React.FC<ThemePillProviderProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  glassmorphism = true,
}) => {
  const value: ThemePillContextValue = {
    variant,
    size,
    glassmorphism,
  };

  return (
    <ThemePillContext.Provider value={value}>
      {children}
    </ThemePillContext.Provider>
  );
};

// ===== BASE PILL COMPONENT =====
interface BasePillProps extends Omit<ChipProps, 'className' | 'variant' | 'size'> {
  children: ReactNode;
  className?: string;
  startContent?: ReactNode;
  endContent?: ReactNode;
}

const BasePill: React.FC<BasePillProps> = ({
  children,
  className = '',
  startContent,
  endContent,
  ...props
}) => {
  const { variant, size, glassmorphism } = useThemePill();

  const baseClasses = glassmorphism ? 'backdrop-blur-xl border' : '';

  const variantClasses = {
    primary: 'bg-glass-accent border-glass-borderStrong text-light-aqua-primary',
    secondary: 'bg-glass-secondary border-glass-borderLight text-text-light',
    success: 'bg-green-500/20 border-green-500/30 text-green-400',
    warning: 'bg-yellow-500/20 border-yellow-500/30 text-yellow-400',
    danger: 'bg-red-500/20 border-red-500/30 text-red-400',
    info: 'bg-blue-500/20 border-blue-500/30 text-blue-400',
    gradient: 'bg-gradient-aqua border-glass-borderStrong text-dark-blue-primary font-semibold',
  };

  const sizeClasses = {
    sm: 'text-xs px-2 py-1',
    md: 'text-sm px-3 py-1.5',
    lg: 'text-base px-4 py-2',
  };

  const pillClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;

  return (
    <Chip
      className={pillClasses}
      size={size}
      variant="flat"
      startContent={startContent}
      endContent={endContent}
      {...props}
    >
      {children}
    </Chip>
  );
};

// ===== ICON COMPOSITION =====
interface PillIconProps {
  icon: LucideIcon;
  position?: 'start' | 'end';
}

const PillIcon: React.FC<PillIconProps> = ({ icon: Icon, position = 'start' }) => {
  const { size } = useThemePill();

  const iconSizes = {
    sm: 12,
    md: 14,
    lg: 16,
  };

  const iconElement = <Icon size={iconSizes[size]} />;

  if (position === 'start') {
    return <BasePill startContent={iconElement} children={<></>} />;
  } else {
    return <BasePill endContent={iconElement} children={<></>} />;
  }
};

// ===== DISCRETE VARIANT COMPONENTS =====
interface PrimaryPillProps extends Omit<BasePillProps, 'children'> {
  children: ReactNode;
}

const PrimaryPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="primary">
    <BasePill {...props} />
  </ThemePillProvider>
);

const SecondaryPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="secondary">
    <BasePill {...props} />
  </ThemePillProvider>
);

const SuccessPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="success">
    <BasePill {...props} />
  </ThemePillProvider>
);

const WarningPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="warning">
    <BasePill {...props} />
  </ThemePillProvider>
);

const DangerPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="danger">
    <BasePill {...props} />
  </ThemePillProvider>
);

const InfoPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="info">
    <BasePill {...props} />
  </ThemePillProvider>
);

const GradientPill: React.FC<PrimaryPillProps> = (props) => (
  <ThemePillProvider variant="gradient">
    <BasePill {...props} />
  </ThemePillProvider>
);

// ===== SIZE VARIANTS =====
interface SmallPillProps extends Omit<BasePillProps, 'children'> {
  children: ReactNode;
}

const SmallPill: React.FC<SmallPillProps> = (props) => (
  <ThemePillProvider size="sm">
    <BasePill {...props} />
  </ThemePillProvider>
);

const MediumPill: React.FC<SmallPillProps> = (props) => (
  <ThemePillProvider size="md">
    <BasePill {...props} />
  </ThemePillProvider>
);

const LargePill: React.FC<SmallPillProps> = (props) => (
  <ThemePillProvider size="lg">
    <BasePill {...props} />
  </ThemePillProvider>
);

// ===== BACKWARDS COMPATIBILITY LAYER =====
interface ThemePillProps
  extends Omit<ChipProps, 'className' | 'variant' | 'size'> {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'gradient';
  size?: 'sm' | 'md' | 'lg';
  icon?: LucideIcon;
  iconPosition?: 'start' | 'end';
  className?: string;
  glassmorphism?: boolean;
}

const ThemePill: React.FC<ThemePillProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  icon: Icon,
  iconPosition = 'start',
  className = '',
  glassmorphism = true,
  ...props
}) => {
  // Icon composition via JSX
  const iconElement = Icon ? (
    <PillIcon icon={Icon} position={iconPosition} />
  ) : null;

  const content = (
    <ThemePillProvider variant={variant} size={size} glassmorphism={glassmorphism}>
      <BasePill className={className} {...props}>
        {children}
      </BasePill>
    </ThemePillProvider>
  );

  // Compose icon with content
  if (iconElement && iconPosition === 'start') {
    return (
      <ThemePillProvider variant={variant} size={size} glassmorphism={glassmorphism}>
        <BasePill className={className} startContent={iconElement} {...props}>
          {children}
        </BasePill>
      </ThemePillProvider>
    );
  }

  if (iconElement && iconPosition === 'end') {
    return (
      <ThemePillProvider variant={variant} size={size} glassmorphism={glassmorphism}>
        <BasePill className={className} endContent={iconElement} {...props}>
          {children}
        </BasePill>
      </ThemePillProvider>
    );
  }

  return content;
};

// ===== EXPORTS =====
export default ThemePill;
export type { ThemePillProps };

// Composition API exports
export {
  ThemePillProvider,
  useThemePill,
  BasePill,
  PillIcon,
  PrimaryPill,
  SecondaryPill,
  SuccessPill,
  WarningPill,
  DangerPill,
  InfoPill,
  GradientPill,
  SmallPill,
  MediumPill,
  LargePill,
};